name: Release Extension

on:
  push:
    tags:
      - "*-v*.*.*" # Trigger on tags like 'project-v1.2.3', 'identity-v0.1.0'

permissions:
  contents: write # Needed to create releases
  actions: write # Add permission to trigger workflows

jobs:
  release-extension:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo artifacts and wasm-tools
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-wasm-cargo-${{ hashFiles('**/Cargo.lock') }}-with-tools
          restore-keys: |
            ${{ runner.os }}-wasm-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-wasm-cargo-

      - name: Extract extension name and version from tag
        id: extract_info
        shell: bash
        run: |
          TAG="${{ github.ref_name }}"
          # Extract name (everything before the last '-v')
          EXT_NAME=$(echo "$TAG" | sed -E 's/(.*)-v([0-9]+\.[0-9]+\.[0-9]+.*)/\1/')
          # Extract version (everything after the last '-v')
          EXT_VERSION=$(echo "$TAG" | sed -E 's/(.*)-v([0-9]+\.[0-9]+\.[0-9]+.*)/\2/')
          echo "Extracted Name: $EXT_NAME"
          echo "Extracted Version: $EXT_VERSION"
          echo "name=$EXT_NAME" >> $GITHUB_OUTPUT
          echo "version=$EXT_VERSION" >> $GITHUB_OUTPUT
          # Set environment variables for subsequent steps
          echo "EXTENSION_NAME=$EXT_NAME" >> $GITHUB_ENV
          echo "EXTENSION_VERSION=$EXT_VERSION" >> $GITHUB_ENV

      - name: Verify Cargo.toml version matches tag version
        shell: bash
        run: |
          echo "Checking version consistency for extension: ${{ env.EXTENSION_NAME }}"
          CARGO_FILE="crates/extensions/${{ env.EXTENSION_NAME }}/Cargo.toml"
          if [ ! -f "$CARGO_FILE" ]; then
            echo "Error: $CARGO_FILE not found!"
            exit 1
          fi
          CARGO_VERSION=$(grep '^version *=' "$CARGO_FILE" | cut -d '"' -f 2)
          echo "Version from tag: ${{ env.EXTENSION_VERSION }}"
          echo "Version from $CARGO_FILE: $CARGO_VERSION"
          if [ "$CARGO_VERSION" != "${{ env.EXTENSION_VERSION }}" ]; then
            echo "Error: Tag version (${{ env.EXTENSION_VERSION }}) does not match $CARGO_FILE version ($CARGO_VERSION)."
            exit 1
          fi
          echo "Versions match."

      - name: Setup Rust WASM target
        run: rustup target add wasm32-unknown-unknown

      - name: Install cargo-binstall
        shell: bash
        run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install wasm-tools using binstall
        shell: bash
        run: cargo binstall -y wasm-tools

      - name: Build the specific extension
        shell: bash
        run: |
          echo "Building extension: ${{ env.EXTENSION_NAME }}"
          make CARGO_RELEASE=1 EXTENSION_NAME=${{ env.EXTENSION_NAME }}

      - name: Generate SHA256 checksum
        shell: bash
        run: |
          cd target/wasm32-unknown-unknown/release/
          sha256sum "${{ env.EXTENSION_NAME }}.component.wasm" > "${{ env.EXTENSION_NAME }}.component.wasm.sha256"
          echo "Generated checksum file: ${{ env.EXTENSION_NAME }}.component.wasm.sha256"
          cd ../../../.. # Return to workspace root

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Extension: ${{ env.EXTENSION_NAME }} v${{ env.EXTENSION_VERSION }}"
          tag_name: ${{ github.ref_name }} # Use the original tag e.g., project-v1.2.3
          files: |
            target/wasm32-unknown-unknown/release/${{ env.EXTENSION_NAME }}.component.wasm
            target/wasm32-unknown-unknown/release/${{ env.EXTENSION_NAME }}.component.wasm.sha256
          body: |
            Release of ${{ env.EXTENSION_NAME }} extension, version ${{ env.EXTENSION_VERSION }}.
            Component WASM and SHA256 checksum attached.

      - name: Trigger Distribution Update via gh CLI
        env:
          GH_TOKEN: ${{ github.token }} # gh cli needs auth
          # HOMEBREW_TAP_TOKEN is needed by the triggered workflow,
          # which will inherit secrets available to the runner.
        run: |
          echo "Triggering update-distribution-channels workflow for tag ${{ github.ref_name }}"
          gh workflow run update-distribution-channels.yml --ref ${{ github.ref_name }}
          echo "Workflow triggered. Note: This step completes immediately, check Actions tab for progress."

      - name: Get Triggered Workflow Run ID
        id: get-run-id
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Wait a few seconds for the run to register
          sleep 5
          echo "Fetching run ID for workflow 'update-distribution-channels.yml' on ref '${{ github.ref_name }}'..."
          RUN_ID=$(gh run list --workflow=update-distribution-channels.yml --ref ${{ github.ref_name }} --limit 1 --json databaseId --jq '.[0].databaseId')
          if [ -z "$RUN_ID" ] || [ "$RUN_ID" == "null" ]; then
            echo "::error::Failed to retrieve run ID. Workflow 'update-distribution-channels.yml' might not have started for ref '${{ github.ref_name }}'."
            exit 1
          fi
          echo "Found run ID: $RUN_ID"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV

      - name: Wait for Distribution Workflow
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Waiting for distribution workflow run $RUN_ID to complete..."
          gh run watch $RUN_ID --exit-status
          echo "Distribution workflow run $RUN_ID completed."
