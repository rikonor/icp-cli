name: Release

on:
  push:
    tags:
      - "v*.*.*" # Trigger on semantic version tags like v1.2.3

permissions:
  contents: write

jobs:
  build-cli:
    strategy:
      matrix:
        # The 'variant' field determines the distribution type of the build.
        # It is passed as the DISTRIBUTION environment variable during build
        # to configure distribution-specific paths and behaviors:
        #   - standard: Default paths (~/.icp)
        #   - homebrew: Homebrew-specific paths ($(brew --prefix)/var/icp)
        include:
          - target: x86_64-unknown-linux-gnu
            variant: standard
            runs-on: ubuntu-latest

          - target: aarch64-apple-darwin
            variant: standard
            runs-on: macos-latest

          - target: x86_64-apple-darwin
            variant: standard
            runs-on: macos-latest

          - target: x86_64-pc-windows-msvc
            variant: standard
            runs-on: windows-2025

          - target: aarch64-apple-darwin
            variant: homebrew
            runs-on: macos-latest

          - target: x86_64-apple-darwin
            variant: homebrew
            runs-on: macos-latest

    runs-on: ${{ matrix.runs-on }}

    steps:
      - uses: actions/checkout@v4

      # Cache cargo registry and build artifacts
      # Uses a hierarchical caching strategy:
      # 1. Try exact match with Cargo.lock hash
      # 2. Fall back to same target/variant without hash
      # 3. Fall back to same target without variant
      # 4. Fall back to just OS-level cache
      # This ensures we can reuse cached dependencies even when Cargo.lock changes
      # or when building different variants of the same target
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ matrix.variant }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-${{ matrix.variant }}-
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build CLI
        shell: bash
        run: |
          rustup target add ${{ matrix.target }}
          DISTRIBUTION=${{ matrix.variant }} cargo build --package icp-cli --target ${{ matrix.target }} --release

      - name: Rename to add variant
        shell: bash
        run: |
          BIN="target/${{ matrix.target }}/release/icp"
          NAME="${BIN%.*}"
          EXT=$(basename -- "${BIN}" | awk -F. 'NF>1 {print $NF}')

          if [ ! -z "${EXT}" ]; then
            EXT=".${EXT}"
          fi

          mv ${BIN} ${NAME}-${{ matrix.target }}-${{ matrix.variant }}${EXT}

      - uses: actions/upload-artifact@v4
        with:
          name: icp-cli-${{ matrix.target }}-${{ matrix.variant }}
          path: target/${{ matrix.target }}/release/icp*

  publish-wit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/wit/publish
        with:
          ghcr_pat: ${{ secrets.GHCR_PAT_TOKEN }}

  create-release:
    needs: [build-cli, publish-wit]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4

      - name: Stage release assets
        run: |
          mkdir -p release-assets

          for d in icp-cli-*; do
            mv $d/icp-* release-assets/
          done

      - name: Generate individual SHA256 checksums
        shell: bash
        run: |
          cd release-assets
          echo "Generating SHA256 checksums for files in $(pwd):"
          ls -1 # List files for debugging
          for file in *; do
            if [ -f "$file" ]; then # Ensure it's a file, not a directory
              sha256sum "$file" > "$file.sha256"
              echo "  Generated $file.sha256"
            fi
          done
          echo "Checksum generation complete."
          cd .. # Return to workspace root

      - uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: release-assets/*

  distribution:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - run: echo "Triggering distribution for version ${{ github.ref_name }}"

  distribution-quick-install:
    needs: distribution
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v4

      - id: get-binaries
        run: |
          STANDARD_BINARIES=$(gh release view "${{ github.ref_name }}" --json assets \
            | jq -r '.assets[] | select(.name) | .name' \
            | grep -E 'icp-.*standard' \
            | tr '\n' ' ')
          echo "icp_binaries=$STANDARD_BINARIES" >> $GITHUB_OUTPUT

      # - uses: ./.github/actions/distribution/quick-install
      #   with:
      #     version: ${{ github.ref_name }}
      #     token: ${{ github.token }}
      #     icp_binaries: ${{ steps.get-binaries.outputs.icp_binaries }}
      #     extension_binaries: ${{ steps.get-extensions.outputs.extension_binaries }}

  distribution-apt:
    needs: distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/distribution/apt
        with:
          version: ${{ github.ref_name }}

  distribution-homebrew:
    needs: distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/distribution/homebrew
        with:
          version: ${{ github.ref_name }}
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          tap_repo: rikonor/homebrew-icp-cli
