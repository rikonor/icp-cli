name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release"
        required: true
        type: string

permissions:
  contents: write

jobs:
  build-cli:
    strategy:
      matrix:
        # The 'variant' field determines the distribution type of the build.
        # It is passed as the DISTRIBUTION environment variable during build
        # to configure distribution-specific paths and behaviors:
        #   - standard: Default paths (~/.icp)
        #   - homebrew: Homebrew-specific paths ($(brew --prefix)/var/icp)
        include:
          - target: x86_64-unknown-linux-gnu
            variant: standard
            runs-on: ubuntu-latest

          - target: aarch64-apple-darwin
            variant: standard
            runs-on: macos-latest

          - target: x86_64-apple-darwin
            variant: standard
            runs-on: macos-latest

          - target: x86_64-pc-windows-msvc
            variant: standard
            runs-on: windows-2025

          - target: aarch64-apple-darwin
            variant: homebrew
            runs-on: macos-latest

          - target: x86_64-apple-darwin
            variant: homebrew
            runs-on: macos-latest

    runs-on: ${{ matrix.runs-on }}

    steps:
      - uses: actions/checkout@v4

      # Cache cargo registry and build artifacts
      # Uses a hierarchical caching strategy:
      # 1. Try exact match with Cargo.lock hash
      # 2. Fall back to same target/variant without hash
      # 3. Fall back to same target without variant
      # 4. Fall back to just OS-level cache
      # This ensures we can reuse cached dependencies even when Cargo.lock changes
      # or when building different variants of the same target
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ matrix.variant }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-${{ matrix.variant }}-
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build CLI
        shell: bash
        run: |
          rustup target add ${{ matrix.target }}
          DISTRIBUTION=${{ matrix.variant }} cargo build --package icp-cli --target ${{ matrix.target }} --release

      - name: Rename to add variant
        shell: bash
        run: |
          BIN="target/${{ matrix.target }}/release/icp"
          NAME="${BIN%.*}"
          EXT=$(basename -- "${BIN}" | awk -F. 'NF>1 {print $NF}')

          if [ ! -z "${EXT}" ]; then
            EXT=".${EXT}"
          fi

          mv ${BIN} ${NAME}-${{ matrix.target }}-${{ matrix.variant }}${EXT}

      - uses: actions/upload-artifact@v4
        with:
          name: icp-cli-${{ matrix.target }}-${{ matrix.variant }}
          path: target/${{ matrix.target }}/release/icp*

  build-extensions:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Cache cargo registry, build artifacts, and installed tools for wasm builds
      # Uses a separate cache key prefix to avoid conflicts with native builds
      # Still maintains fallback to base wasm cache if Cargo.lock changes
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: wasm-cargo-${{ hashFiles('**/Cargo.lock') }}-with-tools
          restore-keys: |
            wasm-cargo-${{ hashFiles('**/Cargo.lock') }}-
            wasm-cargo-

      - name: Setup Rust target
        run: rustup target add wasm32-unknown-unknown

      - name: Check wasm-tools
        id: check-wasm-tools
        shell: bash
        run: |
          if command -v wasm-tools &> /dev/null; then
            echo "wasm-tools already installed"
            echo "skip_install=true" >> $GITHUB_OUTPUT
          else
            echo "skip_install=false" >> $GITHUB_OUTPUT
          fi

      - name: Install wasm-tools
        if: steps.check-wasm-tools.outputs.skip_install == 'false'
        run: cargo install wasm-tools

      - name: build extensions
        run: |
          make CARGO_RELEASE=1 EXTENSION_NAME=build
          make CARGO_RELEASE=1 EXTENSION_NAME=project
          make CARGO_RELEASE=1 EXTENSION_NAME=identity

      - uses: actions/upload-artifact@v4
        with:
          name: extensions
          path: |
            target/wasm32-unknown-unknown/release/build.component.wasm
            target/wasm32-unknown-unknown/release/project.component.wasm
            target/wasm32-unknown-unknown/release/identity.component.wasm

  create-release:
    needs: [build-cli, build-extensions]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4

      - name: Stage release assets
        run: |
          mkdir -p release-assets

          for d in icp-cli-*; do
            mv $d/icp-* release-assets/
          done

          mv extensions/* release-assets/

      - name: Generate checksums
        run: |
          cd release-assets
          sha256sum * > checksums.txt

      - uses: softprops/action-gh-release@v1
        with:
          name: v${{ inputs.version }}
          tag_name: v${{ inputs.version }}
          files: release-assets/*

  distribution:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - run: echo "Triggering distribution for version ${{ inputs.version }}"

  distribution-quick-install:
    needs: distribution
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v4

      - id: get-binaries
        run: |
          STANDARD_BINARIES=$(gh release view "v${{ inputs.version }}" --json assets \
            | jq -r '.assets[] | select(.name) | .name' \
            | grep -E 'icp-.*standard' \
            | tr '\n' ' ')
          echo "icp_binaries=$STANDARD_BINARIES" >> $GITHUB_OUTPUT

      - id: get-extensions
        run: |
          EXTENSIONS=$(gh release view "v${{ inputs.version }}" --json assets \
            | jq -r '.assets[] | select(.name) | .name' \
            | grep .wasm \
            | tr '\n' ' ')
          echo "extension_binaries=$EXTENSIONS" >> $GITHUB_OUTPUT

      # - uses: ./.github/actions/distribution/quick-install
      #   with:
      #     version: ${{ inputs.version }}
      #     token: ${{ github.token }}
      #     icp_binaries: ${{ steps.get-binaries.outputs.icp_binaries }}
      #     extension_binaries: ${{ steps.get-extensions.outputs.extension_binaries }}

  distribution-apt:
    needs: distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/distribution/apt
        with:
          version: ${{ inputs.version }}

  distribution-homebrew:
    needs: distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/distribution/homebrew
        with:
          version: ${{ inputs.version }}
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          tap_repo: rikonor/homebrew-icp-cli
