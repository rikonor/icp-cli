name: Update Brew Repository
description: Updates the Homebrew tap repository with new release information

inputs:
  version:
    description: Version number to distribute
    required: true
  token:
    description: Token for accessing the Homebrew tap repository
    required: true
  tap_repo:
    description: Homebrew tap repository name
    required: false # Optional, defaults can be inferred if needed
  extension_info_json:
    description: JSON string containing extension info (name, version, url, sha256)
    required: true

runs:
  using: composite
  steps:
    - name: Get Release Info
      id: release
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }} # Use the input token here
      run: |
        # Get release info with URLs
        echo "Fetching release info for v${{ inputs.version }}..."
        gh release view "v${{ inputs.version }}" --json assets > release.json
        if [ $? -ne 0 ]; then echo "Error: Failed to fetch release info."; exit 1; fi
        echo "Release info saved to release.json"

        # Get x86_64 binary info (URL)
        echo "Extracting Intel URL..."
        INTEL_URL=$(jq -r '.assets[] | select(.name | contains("x86_64-apple-darwin-homebrew") and (endswith(".tar.gz"))) | .url' release.json)
        if [ -z "$INTEL_URL" ] || [ "$INTEL_URL" == "null" ]; then echo "Error: Intel URL not found in release assets."; exit 1; fi
        echo "intel_url=$INTEL_URL" >> $GITHUB_OUTPUT
        echo "Intel URL: $INTEL_URL"

        # Get ARM binary info (URL)
        echo "Extracting ARM URL..."
        ARM_URL=$(jq -r '.assets[] | select(.name | contains("aarch64-apple-darwin-homebrew") and (endswith(".tar.gz"))) | .url' release.json)
        if [ -z "$ARM_URL" ] || [ "$ARM_URL" == "null" ]; then echo "Error: ARM URL not found in release assets."; exit 1; fi
        echo "arm_url=$ARM_URL" >> $GITHUB_OUTPUT
        echo "ARM URL: $ARM_URL"

        # Download checksums file
        echo "Downloading checksums..."
        gh release download "v${{ inputs.version }}" --pattern "checksums.txt" --output checksums.txt
        if [ $? -ne 0 ]; then echo "Error: Failed to download checksums.txt."; exit 1; fi

        # Extract checksums
        echo "Extracting checksums..."
        INTEL_SHA=$(grep 'x86_64-apple-darwin-homebrew.tar.gz' checksums.txt | cut -d ' ' -f 1)
        if [ -z "$INTEL_SHA" ]; then echo "Error: Intel SHA256 not found in checksums.txt."; exit 1; fi
        echo "intel_sha256=$INTEL_SHA" >> $GITHUB_OUTPUT
        echo "Intel SHA256: $INTEL_SHA"

        ARM_SHA=$(grep 'aarch64-apple-darwin-homebrew.tar.gz' checksums.txt | cut -d ' ' -f 1)
        if [ -z "$ARM_SHA" ]; then echo "Error: ARM SHA256 not found in checksums.txt."; exit 1; fi
        echo "arm_sha256=$ARM_SHA" >> $GITHUB_OUTPUT
        echo "ARM SHA256: $ARM_SHA"

    - name: Clone Tap Repository
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git clone "https://x-access-token:${{ inputs.token }}@github.com/${{ inputs.tap_repo }}.git" tap-repo

    - name: Generate Formula
      shell: bash
      run: |
        # Generate formula using our tool, passing the extension JSON directly
        cargo run --package icp-distribution --bin generate_formula -- \
          --version "${{ inputs.version }}" \
          --extension-info-json '${{ inputs.extension_info_json }}' \
          --intel-url "${{ steps.release.outputs.intel_url }}" \
          --intel-sha256 "${{ steps.release.outputs.intel_sha256 }}" \
          --arm-url "${{ steps.release.outputs.arm_url }}" \
          --arm-sha256 "${{ steps.release.outputs.arm_sha256 }}" \
          --output tap-repo/Formula/icp-cli.rb

    - name: Commit and Push Changes
      shell: bash
      working-directory: tap-repo
      run: |
        git add Formula/icp-cli.rb
        git commit -m "Update icp-cli to version ${{ inputs.version }}"
        git push

    - name: Cleanup Temporary Files
      shell: bash
      run: |
        echo "Cleaning up temporary files..."
        rm -f release.json checksums.txt # Remove downloaded files
        echo "Cleanup complete."
