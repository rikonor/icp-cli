name: Update Brew Repository
description: Updates the Homebrew tap repository with new release information

inputs:
  version:
    description: Version number to distribute
    required: true
  token:
    description: Token for accessing the Homebrew tap repository
    required: true
  tap_repo:
    description: Homebrew tap repository name
    required: false

runs:
  using: composite
  steps:
    - name: Get Release Info
      id: release
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        # Get release info with URLs
        echo "Fetching release info for ${{ inputs.version }}..."
        gh release view "${{ inputs.version }}" --json assets > release.json
        if [ $? -ne 0 ]; then echo "Error: Failed to fetch release info."; exit 1; fi
        echo "Release info saved to release.json"

        # Get x86_64 binary info
        echo "Extracting Intel URL..."
        INTEL_URL=$(jq -r '.assets[] | select(.name | contains("x86_64-apple-darwin-homebrew") and (endswith(".sha256") | not)) | .url' release.json)
        if [ -z "$INTEL_URL" ] || [ "$INTEL_URL" == "null" ]; then echo "Error: Intel URL not found in release assets."; exit 1; fi
        echo "intel_url=$INTEL_URL" >> $GITHUB_OUTPUT
        echo "Intel URL: $INTEL_URL"

        # Get ARM binary info
        echo "Extracting ARM URL..."
        ARM_URL=$(jq -r '.assets[] | select(.name | contains("aarch64-apple-darwin-homebrew") and (endswith(".sha256") | not)) | .url' release.json)
        if [ -z "$ARM_URL" ] || [ "$ARM_URL" == "null" ]; then echo "Error: ARM URL not found in release assets."; exit 1; fi
        echo "arm_url=$ARM_URL" >> $GITHUB_OUTPUT
        echo "ARM URL: $ARM_URL"

        # Get extension info
        echo "Extracting extension info..."
        jq -r '[.assets[] | select(.name | endswith(".component.wasm")) | {
          name: (.name | sub(".component.wasm$"; "")),
          url: .url
        }]' release.json > extensions.json
        if [ $? -ne 0 ]; then echo "Error: Failed to extract extension info."; exit 1; fi
        echo "Extension info saved to extensions.json"

        # Download all individual checksum files
        echo "Downloading all .sha256 checksum files..."
        gh release download "${{ inputs.version }}" -p "*.sha256"
        if [ $? -ne 0 ]; then echo "Error: Failed to download checksum files."; exit 1; fi

        # Combine checksums into a single temporary file, filtering for valid lines
        echo "Combining checksum files into temp_checksums.txt..."
        cat *.sha256 | grep -E '^[a-f0-9]{64}\s+' > temp_checksums.txt
        if [ $? -ne 0 ] || [ ! -s temp_checksums.txt ]; then echo "Error: Failed to create or combine checksum files, or no valid checksum lines found."; exit 1; fi
        echo "Checksums combined and filtered. Content:"
        cat temp_checksums.txt

    - name: Clone Tap Repository
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git clone "https://x-access-token:${{ inputs.token }}@github.com/${{ inputs.tap_repo }}.git" tap-repo

    - name: Generate Formula
      shell: bash
      run: |
        # Generate formula using our tool with direct inputs
        cargo run --package icp-distribution --bin generate_formula -- \
          --version "${{ inputs.version }}" \
          --checksums temp_checksums.txt \
          --extensions extensions.json \
          --intel-url "${{ steps.release.outputs.intel_url }}" \
          --arm-url "${{ steps.release.outputs.arm_url }}" \
          --output tap-repo/Formula/icp-cli.rb

    - name: Commit and Push Changes
      shell: bash
      working-directory: tap-repo
      run: |
        git add Formula/icp-cli.rb
        git commit -m "Update icp-cli to version ${{ inputs.version }}"
        git push

    - name: Cleanup Temporary Files
      shell: bash
      run: |
        echo "Cleaning up temporary files..."
        rm -f release.json extensions.json temp_checksums.txt *.sha256
        echo "Cleanup complete."
