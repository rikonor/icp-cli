package icp:build@0.6.4; // Defines build contracts and worlds

/// Common interface for building a canister.
/// This contract is implemented by:
///  1. The Build Facade: Its implementation determines canister type and delegates.
///  2. Specific Build Providers (e.g., Motoko, Rust): Their implementations perform the actual build.
interface canister-build {
  /// Builds the canister located in the specified directory.
  ///
  /// - `canister-dir`: The relative path to the canister's directory,
  ///   which is expected to contain a manifest file (e.g., `canister.toml`)
  ///   detailing its name and type.
  ///
  /// Returns `ok()` on successful build, or `err(string)` with an error message on failure.
  build-canister: func(canister-dir: string) -> result<_, string>;
}

interface types {
  resource builder {
    build-canister: func(canister-dir: string) -> result<_, string>;
  }
}

/// Interface for build providers to register themselves with the Build Facade.
/// This interface is implemented and exported by the Build Facade.
interface registry {
  use types.{builder};

  /// Registers a build provider for a specific canister type.
  ///
  /// - `canister-type`: A string identifying the type of canister this provider
  ///   handles (e.g., "motoko", "rust", "javascript").
  ///
  /// The mechanism for the facade to obtain a callable instance of the provider's
  /// `canister-build` interface upon registration will be defined in a subsequent step.
  /// For now, this function primarily signals the provider's availability.
  ///
  /// Returns `ok()` on successful registration, or `err(string)` on failure.
  register-provider: func(canister-type: string, canister-builder: builder) -> result<_, string>;
}

/// World implemented by the main Build Facade extension (`crates/extensions/build`).
/// The facade provides the registration service for build providers and also
/// exports its own implementation of `canister-build` which serves as the primary
/// entry point for clients (e.g., `project` extension, direct `icp build` CLI calls).
world facade {
  // Includes standard CLI functionalities like printing and filesystem access.
  // Ensure icp:cli/extension@0.3.0 is the correct version.
  include icp:cli/extension@0.3.0;

  /// The facade exports the `registry` interface for build providers to call.
  export registry;

  /// The facade exports its implementation of `canister-build`. When called,
  /// this will read the canister type from its directory and delegate
  /// to the appropriate registered provider.
  export canister-build;
}

/// World implemented by specific Build Provider extensions (e.g., `crates/extensions/build-mo`).
/// Providers implement their specialized `canister-build` and use the `registry`
/// interface (imported from the facade) to make themselves known.
/// This world is named 'extension' for consistency with other extension WIT files.
world extension {
  // Includes standard CLI functionalities.
  include icp:cli/extension@0.3.0;

  ///
  export types;

  /// Providers import the `registry` interface from the facade to register.
  import registry;

  /// Providers implement and export their specific `canister-build`.
  export canister-build;
}
